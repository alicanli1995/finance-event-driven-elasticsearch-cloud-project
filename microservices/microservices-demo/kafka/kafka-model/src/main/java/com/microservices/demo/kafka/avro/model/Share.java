/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.microservices.demo.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Share extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8665179141865675872L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Share\",\"namespace\":\"com.microservices.demo.kafka.avro.model\",\"fields\":[{\"name\":\"dailyChangePercentage\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"dailyChange\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"c\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"last\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"dailyVolume\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"previousDayClose\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Share> ENCODER =
      new BinaryMessageEncoder<Share>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Share> DECODER =
      new BinaryMessageDecoder<Share>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Share> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Share> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Share> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Share>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Share to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Share from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Share instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Share fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String dailyChangePercentage;
  private java.lang.String dailyChange;
  private java.lang.String c;
  private java.lang.String last;
  private java.lang.String dailyVolume;
  private java.lang.String previousDayClose;
  private java.lang.String description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Share() {}

  /**
   * All-args constructor.
   * @param dailyChangePercentage The new value for dailyChangePercentage
   * @param dailyChange The new value for dailyChange
   * @param c The new value for c
   * @param last The new value for last
   * @param dailyVolume The new value for dailyVolume
   * @param previousDayClose The new value for previousDayClose
   * @param description The new value for description
   */
  public Share(java.lang.String dailyChangePercentage, java.lang.String dailyChange, java.lang.String c, java.lang.String last, java.lang.String dailyVolume, java.lang.String previousDayClose, java.lang.String description) {
    this.dailyChangePercentage = dailyChangePercentage;
    this.dailyChange = dailyChange;
    this.c = c;
    this.last = last;
    this.dailyVolume = dailyVolume;
    this.previousDayClose = previousDayClose;
    this.description = description;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dailyChangePercentage;
    case 1: return dailyChange;
    case 2: return c;
    case 3: return last;
    case 4: return dailyVolume;
    case 5: return previousDayClose;
    case 6: return description;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dailyChangePercentage = value$ != null ? value$.toString() : null; break;
    case 1: dailyChange = value$ != null ? value$.toString() : null; break;
    case 2: c = value$ != null ? value$.toString() : null; break;
    case 3: last = value$ != null ? value$.toString() : null; break;
    case 4: dailyVolume = value$ != null ? value$.toString() : null; break;
    case 5: previousDayClose = value$ != null ? value$.toString() : null; break;
    case 6: description = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'dailyChangePercentage' field.
   * @return The value of the 'dailyChangePercentage' field.
   */
  public java.lang.String getDailyChangePercentage() {
    return dailyChangePercentage;
  }


  /**
   * Sets the value of the 'dailyChangePercentage' field.
   * @param value the value to set.
   */
  public void setDailyChangePercentage(java.lang.String value) {
    this.dailyChangePercentage = value;
  }

  /**
   * Gets the value of the 'dailyChange' field.
   * @return The value of the 'dailyChange' field.
   */
  public java.lang.String getDailyChange() {
    return dailyChange;
  }


  /**
   * Sets the value of the 'dailyChange' field.
   * @param value the value to set.
   */
  public void setDailyChange(java.lang.String value) {
    this.dailyChange = value;
  }

  /**
   * Gets the value of the 'c' field.
   * @return The value of the 'c' field.
   */
  public java.lang.String getC() {
    return c;
  }


  /**
   * Sets the value of the 'c' field.
   * @param value the value to set.
   */
  public void setC(java.lang.String value) {
    this.c = value;
  }

  /**
   * Gets the value of the 'last' field.
   * @return The value of the 'last' field.
   */
  public java.lang.String getLast() {
    return last;
  }


  /**
   * Sets the value of the 'last' field.
   * @param value the value to set.
   */
  public void setLast(java.lang.String value) {
    this.last = value;
  }

  /**
   * Gets the value of the 'dailyVolume' field.
   * @return The value of the 'dailyVolume' field.
   */
  public java.lang.String getDailyVolume() {
    return dailyVolume;
  }


  /**
   * Sets the value of the 'dailyVolume' field.
   * @param value the value to set.
   */
  public void setDailyVolume(java.lang.String value) {
    this.dailyVolume = value;
  }

  /**
   * Gets the value of the 'previousDayClose' field.
   * @return The value of the 'previousDayClose' field.
   */
  public java.lang.String getPreviousDayClose() {
    return previousDayClose;
  }


  /**
   * Sets the value of the 'previousDayClose' field.
   * @param value the value to set.
   */
  public void setPreviousDayClose(java.lang.String value) {
    this.previousDayClose = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Creates a new Share RecordBuilder.
   * @return A new Share RecordBuilder
   */
  public static com.microservices.demo.kafka.avro.model.Share.Builder newBuilder() {
    return new com.microservices.demo.kafka.avro.model.Share.Builder();
  }

  /**
   * Creates a new Share RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Share RecordBuilder
   */
  public static com.microservices.demo.kafka.avro.model.Share.Builder newBuilder(com.microservices.demo.kafka.avro.model.Share.Builder other) {
    if (other == null) {
      return new com.microservices.demo.kafka.avro.model.Share.Builder();
    } else {
      return new com.microservices.demo.kafka.avro.model.Share.Builder(other);
    }
  }

  /**
   * Creates a new Share RecordBuilder by copying an existing Share instance.
   * @param other The existing instance to copy.
   * @return A new Share RecordBuilder
   */
  public static com.microservices.demo.kafka.avro.model.Share.Builder newBuilder(com.microservices.demo.kafka.avro.model.Share other) {
    if (other == null) {
      return new com.microservices.demo.kafka.avro.model.Share.Builder();
    } else {
      return new com.microservices.demo.kafka.avro.model.Share.Builder(other);
    }
  }

  /**
   * RecordBuilder for Share instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Share>
    implements org.apache.avro.data.RecordBuilder<Share> {

    private java.lang.String dailyChangePercentage;
    private java.lang.String dailyChange;
    private java.lang.String c;
    private java.lang.String last;
    private java.lang.String dailyVolume;
    private java.lang.String previousDayClose;
    private java.lang.String description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.microservices.demo.kafka.avro.model.Share.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dailyChangePercentage)) {
        this.dailyChangePercentage = data().deepCopy(fields()[0].schema(), other.dailyChangePercentage);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dailyChange)) {
        this.dailyChange = data().deepCopy(fields()[1].schema(), other.dailyChange);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.c)) {
        this.c = data().deepCopy(fields()[2].schema(), other.c);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.last)) {
        this.last = data().deepCopy(fields()[3].schema(), other.last);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dailyVolume)) {
        this.dailyVolume = data().deepCopy(fields()[4].schema(), other.dailyVolume);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.previousDayClose)) {
        this.previousDayClose = data().deepCopy(fields()[5].schema(), other.previousDayClose);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.description)) {
        this.description = data().deepCopy(fields()[6].schema(), other.description);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Share instance
     * @param other The existing instance to copy.
     */
    private Builder(com.microservices.demo.kafka.avro.model.Share other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.dailyChangePercentage)) {
        this.dailyChangePercentage = data().deepCopy(fields()[0].schema(), other.dailyChangePercentage);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dailyChange)) {
        this.dailyChange = data().deepCopy(fields()[1].schema(), other.dailyChange);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.c)) {
        this.c = data().deepCopy(fields()[2].schema(), other.c);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.last)) {
        this.last = data().deepCopy(fields()[3].schema(), other.last);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dailyVolume)) {
        this.dailyVolume = data().deepCopy(fields()[4].schema(), other.dailyVolume);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.previousDayClose)) {
        this.previousDayClose = data().deepCopy(fields()[5].schema(), other.previousDayClose);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.description)) {
        this.description = data().deepCopy(fields()[6].schema(), other.description);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'dailyChangePercentage' field.
      * @return The value.
      */
    public java.lang.String getDailyChangePercentage() {
      return dailyChangePercentage;
    }


    /**
      * Sets the value of the 'dailyChangePercentage' field.
      * @param value The value of 'dailyChangePercentage'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder setDailyChangePercentage(java.lang.String value) {
      validate(fields()[0], value);
      this.dailyChangePercentage = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'dailyChangePercentage' field has been set.
      * @return True if the 'dailyChangePercentage' field has been set, false otherwise.
      */
    public boolean hasDailyChangePercentage() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dailyChangePercentage' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder clearDailyChangePercentage() {
      dailyChangePercentage = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dailyChange' field.
      * @return The value.
      */
    public java.lang.String getDailyChange() {
      return dailyChange;
    }


    /**
      * Sets the value of the 'dailyChange' field.
      * @param value The value of 'dailyChange'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder setDailyChange(java.lang.String value) {
      validate(fields()[1], value);
      this.dailyChange = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dailyChange' field has been set.
      * @return True if the 'dailyChange' field has been set, false otherwise.
      */
    public boolean hasDailyChange() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dailyChange' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder clearDailyChange() {
      dailyChange = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'c' field.
      * @return The value.
      */
    public java.lang.String getC() {
      return c;
    }


    /**
      * Sets the value of the 'c' field.
      * @param value The value of 'c'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder setC(java.lang.String value) {
      validate(fields()[2], value);
      this.c = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'c' field has been set.
      * @return True if the 'c' field has been set, false otherwise.
      */
    public boolean hasC() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'c' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder clearC() {
      c = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'last' field.
      * @return The value.
      */
    public java.lang.String getLast() {
      return last;
    }


    /**
      * Sets the value of the 'last' field.
      * @param value The value of 'last'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder setLast(java.lang.String value) {
      validate(fields()[3], value);
      this.last = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'last' field has been set.
      * @return True if the 'last' field has been set, false otherwise.
      */
    public boolean hasLast() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'last' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder clearLast() {
      last = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dailyVolume' field.
      * @return The value.
      */
    public java.lang.String getDailyVolume() {
      return dailyVolume;
    }


    /**
      * Sets the value of the 'dailyVolume' field.
      * @param value The value of 'dailyVolume'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder setDailyVolume(java.lang.String value) {
      validate(fields()[4], value);
      this.dailyVolume = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dailyVolume' field has been set.
      * @return True if the 'dailyVolume' field has been set, false otherwise.
      */
    public boolean hasDailyVolume() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dailyVolume' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder clearDailyVolume() {
      dailyVolume = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'previousDayClose' field.
      * @return The value.
      */
    public java.lang.String getPreviousDayClose() {
      return previousDayClose;
    }


    /**
      * Sets the value of the 'previousDayClose' field.
      * @param value The value of 'previousDayClose'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder setPreviousDayClose(java.lang.String value) {
      validate(fields()[5], value);
      this.previousDayClose = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'previousDayClose' field has been set.
      * @return True if the 'previousDayClose' field has been set, false otherwise.
      */
    public boolean hasPreviousDayClose() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'previousDayClose' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder clearPreviousDayClose() {
      previousDayClose = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder setDescription(java.lang.String value) {
      validate(fields()[6], value);
      this.description = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.Share.Builder clearDescription() {
      description = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Share build() {
      try {
        Share record = new Share();
        record.dailyChangePercentage = fieldSetFlags()[0] ? this.dailyChangePercentage : (java.lang.String) defaultValue(fields()[0]);
        record.dailyChange = fieldSetFlags()[1] ? this.dailyChange : (java.lang.String) defaultValue(fields()[1]);
        record.c = fieldSetFlags()[2] ? this.c : (java.lang.String) defaultValue(fields()[2]);
        record.last = fieldSetFlags()[3] ? this.last : (java.lang.String) defaultValue(fields()[3]);
        record.dailyVolume = fieldSetFlags()[4] ? this.dailyVolume : (java.lang.String) defaultValue(fields()[4]);
        record.previousDayClose = fieldSetFlags()[5] ? this.previousDayClose : (java.lang.String) defaultValue(fields()[5]);
        record.description = fieldSetFlags()[6] ? this.description : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Share>
    WRITER$ = (org.apache.avro.io.DatumWriter<Share>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Share>
    READER$ = (org.apache.avro.io.DatumReader<Share>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.dailyChangePercentage);

    out.writeString(this.dailyChange);

    out.writeString(this.c);

    out.writeString(this.last);

    out.writeString(this.dailyVolume);

    out.writeString(this.previousDayClose);

    out.writeString(this.description);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.dailyChangePercentage = in.readString();

      this.dailyChange = in.readString();

      this.c = in.readString();

      this.last = in.readString();

      this.dailyVolume = in.readString();

      this.previousDayClose = in.readString();

      this.description = in.readString();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.dailyChangePercentage = in.readString();
          break;

        case 1:
          this.dailyChange = in.readString();
          break;

        case 2:
          this.c = in.readString();
          break;

        case 3:
          this.last = in.readString();
          break;

        case 4:
          this.dailyVolume = in.readString();
          break;

        case 5:
          this.previousDayClose = in.readString();
          break;

        case 6:
          this.description = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










