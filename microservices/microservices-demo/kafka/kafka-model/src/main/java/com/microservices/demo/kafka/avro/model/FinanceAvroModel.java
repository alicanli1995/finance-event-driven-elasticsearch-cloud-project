/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.microservices.demo.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FinanceAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6069870114155554710L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FinanceAvroModel\",\"namespace\":\"com.microservices.demo.kafka.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"shareData\",\"type\":{\"type\":\"record\",\"name\":\"Share\",\"fields\":[{\"name\":\"dailyChangePercentage\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"dailyChange\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"c\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"last\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"dailyVolume\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"previousDayClose\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"createdAt\",\"type\":[\"null\",\"long\"],\"logicalType\":[\"null\",\"date\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FinanceAvroModel> ENCODER =
      new BinaryMessageEncoder<FinanceAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FinanceAvroModel> DECODER =
      new BinaryMessageDecoder<FinanceAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FinanceAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FinanceAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FinanceAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FinanceAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FinanceAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FinanceAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FinanceAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FinanceAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private com.microservices.demo.kafka.avro.model.Share shareData;
  private java.lang.Long createdAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FinanceAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param shareData The new value for shareData
   * @param createdAt The new value for createdAt
   */
  public FinanceAvroModel(java.lang.String id, com.microservices.demo.kafka.avro.model.Share shareData, java.lang.Long createdAt) {
    this.id = id;
    this.shareData = shareData;
    this.createdAt = createdAt;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return shareData;
    case 2: return createdAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: shareData = (com.microservices.demo.kafka.avro.model.Share)value$; break;
    case 2: createdAt = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'shareData' field.
   * @return The value of the 'shareData' field.
   */
  public com.microservices.demo.kafka.avro.model.Share getShareData() {
    return shareData;
  }


  /**
   * Sets the value of the 'shareData' field.
   * @param value the value to set.
   */
  public void setShareData(com.microservices.demo.kafka.avro.model.Share value) {
    this.shareData = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.lang.Long getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.Long value) {
    this.createdAt = value;
  }

  /**
   * Creates a new FinanceAvroModel RecordBuilder.
   * @return A new FinanceAvroModel RecordBuilder
   */
  public static com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder newBuilder() {
    return new com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder();
  }

  /**
   * Creates a new FinanceAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FinanceAvroModel RecordBuilder
   */
  public static com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder newBuilder(com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder other) {
    if (other == null) {
      return new com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder();
    } else {
      return new com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new FinanceAvroModel RecordBuilder by copying an existing FinanceAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new FinanceAvroModel RecordBuilder
   */
  public static com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder newBuilder(com.microservices.demo.kafka.avro.model.FinanceAvroModel other) {
    if (other == null) {
      return new com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder();
    } else {
      return new com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for FinanceAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FinanceAvroModel>
    implements org.apache.avro.data.RecordBuilder<FinanceAvroModel> {

    private java.lang.String id;
    private com.microservices.demo.kafka.avro.model.Share shareData;
    private com.microservices.demo.kafka.avro.model.Share.Builder shareDataBuilder;
    private java.lang.Long createdAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.shareData)) {
        this.shareData = data().deepCopy(fields()[1].schema(), other.shareData);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasShareDataBuilder()) {
        this.shareDataBuilder = com.microservices.demo.kafka.avro.model.Share.newBuilder(other.getShareDataBuilder());
      }
      if (isValidValue(fields()[2], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[2].schema(), other.createdAt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing FinanceAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.microservices.demo.kafka.avro.model.FinanceAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.shareData)) {
        this.shareData = data().deepCopy(fields()[1].schema(), other.shareData);
        fieldSetFlags()[1] = true;
      }
      this.shareDataBuilder = null;
      if (isValidValue(fields()[2], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[2].schema(), other.createdAt);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'shareData' field.
      * @return The value.
      */
    public com.microservices.demo.kafka.avro.model.Share getShareData() {
      return shareData;
    }


    /**
      * Sets the value of the 'shareData' field.
      * @param value The value of 'shareData'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder setShareData(com.microservices.demo.kafka.avro.model.Share value) {
      validate(fields()[1], value);
      this.shareDataBuilder = null;
      this.shareData = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'shareData' field has been set.
      * @return True if the 'shareData' field has been set, false otherwise.
      */
    public boolean hasShareData() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'shareData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.microservices.demo.kafka.avro.model.Share.Builder getShareDataBuilder() {
      if (shareDataBuilder == null) {
        if (hasShareData()) {
          setShareDataBuilder(com.microservices.demo.kafka.avro.model.Share.newBuilder(shareData));
        } else {
          setShareDataBuilder(com.microservices.demo.kafka.avro.model.Share.newBuilder());
        }
      }
      return shareDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'shareData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder setShareDataBuilder(com.microservices.demo.kafka.avro.model.Share.Builder value) {
      clearShareData();
      shareDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'shareData' field has an active Builder instance
     * @return True if the 'shareData' field has an active Builder instance
     */
    public boolean hasShareDataBuilder() {
      return shareDataBuilder != null;
    }

    /**
      * Clears the value of the 'shareData' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder clearShareData() {
      shareData = null;
      shareDataBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.lang.Long getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder setCreatedAt(java.lang.Long value) {
      validate(fields()[2], value);
      this.createdAt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAvroModel.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FinanceAvroModel build() {
      try {
        FinanceAvroModel record = new FinanceAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        if (shareDataBuilder != null) {
          try {
            record.shareData = this.shareDataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("shareData"));
            throw e;
          }
        } else {
          record.shareData = fieldSetFlags()[1] ? this.shareData : (com.microservices.demo.kafka.avro.model.Share) defaultValue(fields()[1]);
        }
        record.createdAt = fieldSetFlags()[2] ? this.createdAt : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FinanceAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<FinanceAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FinanceAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<FinanceAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










