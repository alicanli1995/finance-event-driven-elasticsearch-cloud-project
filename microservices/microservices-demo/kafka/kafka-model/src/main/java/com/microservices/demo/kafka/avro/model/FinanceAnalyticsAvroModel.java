/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.microservices.demo.kafka.avro.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class FinanceAnalyticsAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 417664502060432995L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FinanceAnalyticsAvroModel\",\"namespace\":\"com.microservices.demo.kafka.avro.model\",\"fields\":[{\"name\":\"share\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"shareVolume\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"createdAt\",\"type\":[\"null\",\"long\"],\"logicalType\":[\"null\",\"date\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FinanceAnalyticsAvroModel> ENCODER =
      new BinaryMessageEncoder<FinanceAnalyticsAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FinanceAnalyticsAvroModel> DECODER =
      new BinaryMessageDecoder<FinanceAnalyticsAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FinanceAnalyticsAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FinanceAnalyticsAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FinanceAnalyticsAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FinanceAnalyticsAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FinanceAnalyticsAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FinanceAnalyticsAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FinanceAnalyticsAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FinanceAnalyticsAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String share;
  private java.lang.String shareVolume;
  private java.lang.Long createdAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FinanceAnalyticsAvroModel() {}

  /**
   * All-args constructor.
   * @param share The new value for share
   * @param shareVolume The new value for shareVolume
   * @param createdAt The new value for createdAt
   */
  public FinanceAnalyticsAvroModel(java.lang.String share, java.lang.String shareVolume, java.lang.Long createdAt) {
    this.share = share;
    this.shareVolume = shareVolume;
    this.createdAt = createdAt;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return share;
    case 1: return shareVolume;
    case 2: return createdAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: share = value$ != null ? value$.toString() : null; break;
    case 1: shareVolume = value$ != null ? value$.toString() : null; break;
    case 2: createdAt = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'share' field.
   * @return The value of the 'share' field.
   */
  public java.lang.String getShare() {
    return share;
  }


  /**
   * Sets the value of the 'share' field.
   * @param value the value to set.
   */
  public void setShare(java.lang.String value) {
    this.share = value;
  }

  /**
   * Gets the value of the 'shareVolume' field.
   * @return The value of the 'shareVolume' field.
   */
  public java.lang.String getShareVolume() {
    return shareVolume;
  }


  /**
   * Sets the value of the 'shareVolume' field.
   * @param value the value to set.
   */
  public void setShareVolume(java.lang.String value) {
    this.shareVolume = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.lang.Long getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.Long value) {
    this.createdAt = value;
  }

  /**
   * Creates a new FinanceAnalyticsAvroModel RecordBuilder.
   * @return A new FinanceAnalyticsAvroModel RecordBuilder
   */
  public static com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder newBuilder() {
    return new com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder();
  }

  /**
   * Creates a new FinanceAnalyticsAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FinanceAnalyticsAvroModel RecordBuilder
   */
  public static com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder newBuilder(com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder other) {
    if (other == null) {
      return new com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder();
    } else {
      return new com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new FinanceAnalyticsAvroModel RecordBuilder by copying an existing FinanceAnalyticsAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new FinanceAnalyticsAvroModel RecordBuilder
   */
  public static com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder newBuilder(com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel other) {
    if (other == null) {
      return new com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder();
    } else {
      return new com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for FinanceAnalyticsAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FinanceAnalyticsAvroModel>
    implements org.apache.avro.data.RecordBuilder<FinanceAnalyticsAvroModel> {

    private java.lang.String share;
    private java.lang.String shareVolume;
    private java.lang.Long createdAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.share)) {
        this.share = data().deepCopy(fields()[0].schema(), other.share);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.shareVolume)) {
        this.shareVolume = data().deepCopy(fields()[1].schema(), other.shareVolume);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[2].schema(), other.createdAt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing FinanceAnalyticsAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.share)) {
        this.share = data().deepCopy(fields()[0].schema(), other.share);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.shareVolume)) {
        this.shareVolume = data().deepCopy(fields()[1].schema(), other.shareVolume);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[2].schema(), other.createdAt);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'share' field.
      * @return The value.
      */
    public java.lang.String getShare() {
      return share;
    }


    /**
      * Sets the value of the 'share' field.
      * @param value The value of 'share'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder setShare(java.lang.String value) {
      validate(fields()[0], value);
      this.share = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'share' field has been set.
      * @return True if the 'share' field has been set, false otherwise.
      */
    public boolean hasShare() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'share' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder clearShare() {
      share = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'shareVolume' field.
      * @return The value.
      */
    public java.lang.String getShareVolume() {
      return shareVolume;
    }


    /**
      * Sets the value of the 'shareVolume' field.
      * @param value The value of 'shareVolume'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder setShareVolume(java.lang.String value) {
      validate(fields()[1], value);
      this.shareVolume = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'shareVolume' field has been set.
      * @return True if the 'shareVolume' field has been set, false otherwise.
      */
    public boolean hasShareVolume() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'shareVolume' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder clearShareVolume() {
      shareVolume = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.lang.Long getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder setCreatedAt(java.lang.Long value) {
      validate(fields()[2], value);
      this.createdAt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.microservices.demo.kafka.avro.model.FinanceAnalyticsAvroModel.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FinanceAnalyticsAvroModel build() {
      try {
        FinanceAnalyticsAvroModel record = new FinanceAnalyticsAvroModel();
        record.share = fieldSetFlags()[0] ? this.share : (java.lang.String) defaultValue(fields()[0]);
        record.shareVolume = fieldSetFlags()[1] ? this.shareVolume : (java.lang.String) defaultValue(fields()[1]);
        record.createdAt = fieldSetFlags()[2] ? this.createdAt : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FinanceAnalyticsAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<FinanceAnalyticsAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FinanceAnalyticsAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<FinanceAnalyticsAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.share == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.share);
    }

    if (this.shareVolume == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.shareVolume);
    }

    if (this.createdAt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.createdAt);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.share = null;
      } else {
        this.share = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.shareVolume = null;
      } else {
        this.shareVolume = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.createdAt = null;
      } else {
        this.createdAt = in.readLong();
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.share = null;
          } else {
            this.share = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.shareVolume = null;
          } else {
            this.shareVolume = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.createdAt = null;
          } else {
            this.createdAt = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










